# Node.js

# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master



stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool: windows
    steps:
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'sonar'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'Ericsson-Demo_Ericsson-Demo_AYC-UmSs0lqEB4wZWcJi'
        cliProjectName: 'Ericsson-Demo'
        cliSources: '.'
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js'
    - script: |
        npm install
        npm run build --if-present
        npm install mocha-junit-reporter
        npm test
    
    - task: SonarQubeAnalyze@5
    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'
        
   
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: JUnit
        testResultsFiles: '$(Build.SourcesDirectory)/test-results.xml'
        testRunTitle: 'test'
       
      displayName: 'npm install, build and test'
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop
    - task: ArtifactoryGenericUpload@2
      inputs:
       artifactoryService: 'jfrog'
       specSource: 'taskConfiguration'
       fileSpec: |
         {
           "files": [
             {
               "pattern": "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip",
               "target": "/test/"
             }
           ]
         }
       failNoOp: true
      

- stage: Deploy
  jobs:  
  - deployment: VMDeploy
    displayName: web
    environment:
      name:  windowsnpm
      resourceType: VirtualMachine
      tags: windows
    strategy:
      runOnce:
       # maxParallel: 2
        preDeploy:
          steps:
          - script: Downloading Jfrog Artifacts
          - task: ArtifactoryGenericDownload@3
            inputs:
              connection: 'jfrog'
              specSource: 'taskConfiguration'
              fileSpec: |
                {
                  "files": [
                    {
                      "pattern": "/test/$(Build.BuildId).zip",
                      "target": "C:\artifacts"
                    }
                  ]
                }
              failNoOp: true

        
        deploy:
          steps:
          - script: echo Unarchieving artifacts
          - task: ExtractFiles@1
            inputs:
               archiveFilePatterns: '*.zip' 
               destinationFolder: C:\artifacts\drop
               cleanDestinationFolder: true
               overwriteExistingFiles: true
               #pathToSevenZipTool: 
          - script: npm -v
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Modify deployment script based on the app type
                echo "Starting deployment script run"
                echo "Starting npm"
                
                new-item -itemtype file -path C:\artifacts\drop -name ".env" -force -value '
                command=$(command)
                db_name=$(db_name)
                username=$(username)
                '
                cd "C:\artifacts\drop"
                npm i
                #echo "Removing old zip"
                #rm -rf $PWD/drop/*.zip
                #rm -rf $(Build.SourcesDirectory)/*.zip
               # workingDirectory: '$(Build.ArtifactStagingDirectory)'
#- stage: BlackDuckScan
#  displayName: BlackDuckScan
#  jobs:  
#    - job: BlackDuckScan
#      displayName: DuckBuckScan
#      pool: windows
#      steps:    
#          - task: SynopsysDetectTask@7
#            inputs:
#              BlackDuckService: 'blackduck'
#              DetectVersion: 'latest'
#              DetectFolder: '$(Build.SourcesDirectory)/drop'